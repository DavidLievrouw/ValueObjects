[  
using System;

namespace Dalion.ValueObjects
{
    // ReSharper disable once RedundantNullableDirective
#nullable enable
    /// <inheritdoc/>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
    public class ValueObjectAttribute<T> : ValueObjectAttribute
    {
        /// <summary>
        ///     Configures aspects of this individual value object.
        /// </summary>
        /// <param name = "comparison">
        ///     Species which comparison code is generated—defaults to
        ///     <see cref = "ComparisonGeneration.UseUnderlying"/> which hoists any IComparable implementations from the underlying
        ///     type.
        /// </param>
        /// <param name = "toUnderlyingTypeCasting">
        ///     Controls how cast operators are generated for casting from the Value Object to the underlying type.
        ///     Options are implicit or explicit or none.  Explicit is preferred over implicit if you really need them, but isn't
        ///     recommended.
        /// </param>
        /// <param name = "fromUnderlyingTypeCasting">
        ///     Controls how cast operators are generated for casting from the underlying type to the Value Object.
        ///     Options are implicit or explicit or none.  Explicit is preferred over implicit if you really need them, but isn't
        ///     recommended.
        /// </param>
        /// <param name = "stringCaseSensitivity">
        ///     When using a <see cref = "string "/> as a backing value, controls whether comparisons are case-sensitive.
        ///     Defaults to <see cref = "StringCaseSensitivity.CaseSensitive"/>.
        /// </param>
        /// <param name = "underlyingTypeEqualityGeneration">
        ///     Specifies whether to generate underlying type comparison operators, allowing this type to be compared for equality
        ///     to the
        ///     underlying type.
        ///     Defaults to <see cref = "UnderlyingTypeEqualityGeneration.Omit"/>
        /// </param>
        /// <param name = "fluentValidationExtensionsGeneration">
        ///     Specifies whether to generate FluentValidation extension methods for this value object.
        ///     Defaults to <see cref = "FluentValidationExtensionsGeneration.Omit"/>.
        /// </param>
        /// <param name = "parsableGeneration">
        ///     Defines if IParsable implementation and related methods are generated. Defaults to
        ///     <see cref = "ParsableGeneration.Generate"/>.
        /// </param>
        /// <param name = "underlyingTypeCreationMethodGeneration">
        ///     Defines if an extension method for value object creation is generated for the underlying type.
        ///     Defaults to <see cref = "UnderlyingTypeCreationMethodGeneration.Omit"/>.
        /// </param>
        /// <param name = "emptyValueName">
        ///     The name of the static property representing an empty value object, if applicable.
        ///     Defaults to "Empty".
        /// </param>
        public ValueObjectAttribute(ComparisonGeneration comparison = DefaultComparison, CastOperator toUnderlyingTypeCasting = DefaultToUnderlyingTypeCasting, CastOperator fromUnderlyingTypeCasting = DefaultFromUnderlyingTypeCasting, StringCaseSensitivity stringCaseSensitivity = DefaultStringCaseSensitivity, UnderlyingTypeEqualityGeneration underlyingTypeEqualityGeneration = DefaultUnderlyingTypeEqualityGeneration, FluentValidationExtensionsGeneration fluentValidationExtensionsGeneration = DefaultFluentValidationExtensionsGeneration, ParsableGeneration parsableGeneration = DefaultParsableGeneration, UnderlyingTypeCreationMethodGeneration underlyingTypeCreationMethodGeneration = DefaultUnderlyingTypeCreationMethodGeneration, string emptyValueName = DefaultEmptyValueName) : base(typeof(T), comparison, toUnderlyingTypeCasting, fromUnderlyingTypeCasting, stringCaseSensitivity, underlyingTypeEqualityGeneration, fluentValidationExtensionsGeneration, parsableGeneration, underlyingTypeCreationMethodGeneration, emptyValueName)
        {
        }
    }

    /// <summary>
    ///     Marks a type as a Value Object. The type that this is applied to should be partial so that the
    ///     source generator can augment it with equality, creation barriers, and any conversions.
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
    public class ValueObjectAttribute : Attribute
    {
        internal const ComparisonGeneration DefaultComparison = ComparisonGeneration.UseUnderlying;
        internal const CastOperator DefaultToUnderlyingTypeCasting = CastOperator.None;
        internal const CastOperator DefaultFromUnderlyingTypeCasting = CastOperator.None;
        internal const StringCaseSensitivity DefaultStringCaseSensitivity = StringCaseSensitivity.CaseSensitive;
        internal const UnderlyingTypeEqualityGeneration DefaultUnderlyingTypeEqualityGeneration = UnderlyingTypeEqualityGeneration.Omit;
        internal const FluentValidationExtensionsGeneration DefaultFluentValidationExtensionsGeneration = FluentValidationExtensionsGeneration.Omit;
        internal const ParsableGeneration DefaultParsableGeneration = ParsableGeneration.Generate;
        internal const UnderlyingTypeCreationMethodGeneration DefaultUnderlyingTypeCreationMethodGeneration = UnderlyingTypeCreationMethodGeneration.Omit;
        internal const string DefaultEmptyValueName = "Empty";
        /// <summary>
        ///     Configures aspects of this individual value object.
        /// </summary>
        /// <param name = "underlyingType">The type of the underlying value that is being wrapped.</param>
        /// <param name = "comparison">
        ///     Species which comparison code is generated—defaults to
        ///     <see cref = "ComparisonGeneration.UseUnderlying"/> which hoists any IComparable implementations from the underlying
        ///     type.
        /// </param>
        /// <param name = "toUnderlyingTypeCasting">
        ///     Specifies the type of casting from wrapper to the underlying type - defaults to
        ///     <see cref = "CastOperator.Explicit"/>.
        /// </param>
        /// <param name = "fromUnderlyingTypeCasting">
        ///     Specifies the type of casting from the underlying type to wrapper - default to
        ///     <see cref = "CastOperator.Explicit"/>.
        /// </param>
        /// <param name = "stringCaseSensitivity">
        ///     When using a <see cref = "string "/> as a backing value, controls whether comparisons are case-sensitive.
        ///     Defaults to <see cref = "StringCaseSensitivity.CaseSensitive"/>.
        /// </param>
        /// <param name = "underlyingTypeEqualityGeneration">
        ///     Specifies whether to generate underlying value comparison operators, allowing this type to be compared for equality
        ///     to the
        ///     underlying type.
        ///     Defaults to <see cref = "UnderlyingTypeEqualityGeneration.Omit"/>
        /// </param>
        /// <param name = "fluentValidationExtensionsGeneration">
        ///     Specifies whether to generate FluentValidation extension methods for this value object.
        ///     Defaults to <see cref = "FluentValidationExtensionsGeneration.Omit"/>.
        /// </param>
        /// <param name = "parsableGeneration">
        ///     Defines if IParsable implementation and related methods are generated. Defaults to
        ///     <see cref = "ParsableGeneration.Generate"/>.
        /// </param>
        /// <param name = "underlyingTypeCreationMethodGeneration">
        ///     Defines if an extension method for value object creation is generated for the underlying type.
        ///     Defaults to <see cref = "UnderlyingTypeCreationMethodGeneration.Omit"/>.
        /// </param>
        /// <param name = "emptyValueName">
        ///     The name of the static property representing an empty value object, if applicable.
        ///     Defaults to "Empty".
        /// </param>
        public ValueObjectAttribute(Type? underlyingType = null !, ComparisonGeneration comparison = DefaultComparison, CastOperator toUnderlyingTypeCasting = DefaultToUnderlyingTypeCasting, CastOperator fromUnderlyingTypeCasting = DefaultFromUnderlyingTypeCasting, StringCaseSensitivity stringCaseSensitivity = DefaultStringCaseSensitivity, UnderlyingTypeEqualityGeneration underlyingTypeEqualityGeneration = DefaultUnderlyingTypeEqualityGeneration, FluentValidationExtensionsGeneration fluentValidationExtensionsGeneration = DefaultFluentValidationExtensionsGeneration, ParsableGeneration parsableGeneration = DefaultParsableGeneration, UnderlyingTypeCreationMethodGeneration underlyingTypeCreationMethodGeneration = DefaultUnderlyingTypeCreationMethodGeneration, string emptyValueName = DefaultEmptyValueName)
        {
        }
    }

    /// <summary>
    ///     The type of cast operator to generate.
    /// </summary>
    public enum CastOperator
    {
        /// <summary>
        ///     No cast operators are generated.
        /// </summary>
        None = 0,
        /// <summary>
        ///     Explicit cast operators are generated.
        /// </summary>
        Explicit = 1,
        /// <summary>
        ///     Implicit cast operators are generated.
        /// </summary>
        Implicit = 2,
    }

    /// <summary>
    ///     The generation of comparison code for a Value Object.
    /// </summary>
    public enum ComparisonGeneration
    {
        /// <summary>
        ///     Omits the IComparable interface and implementation. Useful for opaque types such as tokens or IDs where comparison
        ///     doesn't make sense.
        /// </summary>
        Omit = 0,
        /// <summary>
        ///     Uses the default IComparable from the underlying type.
        /// </summary>
        UseUnderlying = 1,
    }

    /// <summary>
    ///     Specifies whether to generate string comparers for a value object based on a string primitive type.
    /// </summary>
    public enum StringCaseSensitivity
    {
        /// <summary>
        ///     The backing string values are case-sensitive.
        /// </summary>
        CaseSensitive = 0,
        /// <summary>
        ///     The backing string values are case-sensitive.
        /// </summary>
        CaseInsensitive = 1,
    }

    /// <summary>
    ///     Defines if equality operators to the underlying values are generated.
    /// </summary>
    [Flags]
    public enum UnderlyingTypeEqualityGeneration
    {
        /// <summary>
        ///     Do not generate.
        /// </summary>
        Omit = 0,
        /// <summary>
        ///     Generate equals operators for the underlying type.
        /// </summary>
        GenerateOperators = 1 << 0,
        /// <summary>
        ///     Generate equals methods for the underlying type.
        /// </summary>
        GenerateMethods = 1 << 1,
        /// <summary>
        ///     Generate both operators and methods.
        /// </summary>
        GenerateOperatorsAndMethods = GenerateOperators | GenerateMethods,
    }

    /// <summary>
    ///     Defines if FluentValidation extension methods are generated.
    /// </summary>
    [Flags]
    public enum FluentValidationExtensionsGeneration
    {
        /// <summary>
        ///     Do not generate.
        /// </summary>
        Omit = 0,
        /// <summary>
        ///     Generate MustBeInitialized extension method.
        /// </summary>
        GenerateMustBeInitialized = 1 << 0,
        /// <summary>
        ///     Generate MustBeInitializedAndValid extension method.
        /// </summary>
        GenerateMustBeInitializedAndValid = 1 << 1,
        /// <summary>
        ///     Generate all methods.
        /// </summary>
        GenerateAll = GenerateMustBeInitialized | GenerateMustBeInitializedAndValid,
    }

    /// <summary>
    ///     Defines if IParsable implementation and related methods are generated.
    /// </summary>
    public enum ParsableGeneration
    {
        /// <summary>
        ///     Do not generate.
        /// </summary>
        Omit = 0,
        /// <summary>
        ///     Generate IParsable implementation and related methods.
        /// </summary>
        Generate = 1,
    }

    /// <summary>
    ///     Defines if an extension method for value object creation is generated for the underlying type.
    /// </summary>
    public enum UnderlyingTypeCreationMethodGeneration
    {
        /// <summary>
        ///     Do not generate.
        /// </summary>
        Omit = 0,
        /// <summary>
        ///     Generate Create method.
        /// </summary>
        Generate = 1,
    }
}
  
#nullable enable

using System;

namespace Dalion.ValueObjects.Samples {
    
    [System.Diagnostics.DebuggerDisplay("ResourceGroupName {Value}")]
    [System.Text.Json.Serialization.JsonConverter(typeof(ResourceGroupNameSystemTextJsonConverter))]
    [System.ComponentModel.TypeConverter(typeof(ResourceGroupNameTypeConverter))]
    public partial record struct ResourceGroupName : IEquatable<ResourceGroupName>, IEquatable<System.String>, ISpanParsable<ResourceGroupName>, IUtf8SpanParsable<ResourceGroupName>, IComparable<ResourceGroupName>, IComparable {
        private readonly System.String _value;
        private readonly bool _initialized;
#pragma warning disable CS0414
        private readonly bool _isNullOrEmpty;
#pragma warning restore CS0414
        private readonly Validation _validation;
        private static readonly Type UnderlyingType = typeof(System.String);

        /// <summary>
        ///     Gets the underlying value of this <see cref="ResourceGroupName"/>.
        /// </summary>
        public System.String Value => _value;

        /// <summary>
        ///     Creates a new <see cref="ResourceGroupName"/>.
        /// </summary>
        [System.Diagnostics.DebuggerStepThrough]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public ResourceGroupName()
        {
            _value = System.String.Empty;
            _initialized = false;
            _isNullOrEmpty = System.String.IsNullOrEmpty(_value);
            _validation ??= Validate(_value);
        }

        /// <summary>
        ///     Creates a new <see cref="ResourceGroupName"/>.
        /// </summary>
        /// <param name="value">The underlying value to create the value object from.</param>
        [System.Diagnostics.DebuggerStepThrough]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        private ResourceGroupName(System.String? value) {
            value = Normalize(value);
            if (value == default) {
                _initialized = false;
                _value = System.String.Empty;
            } else {
                _initialized = true;
                _value = value;
            }
            _isNullOrEmpty = System.String.IsNullOrEmpty(_value);
            _validation ??= Validate(_value);
        }

        /// <summary>
        ///     Creates a new <see cref="ResourceGroupName"/> from the
        ///     given <see cref="System.String"/>.
        /// </summary>
        /// <param name="value">The underlying value to create the value object from.</param>
        /// <returns>A new <see cref="ResourceGroupName"/>.</returns>
        public static ResourceGroupName From(System.String? value) {
            if (value is null) {
                throw new System.ArgumentException("Cannot create an instance of ResourceGroupName from null.");
            }

            var vo = new ResourceGroupName(value);

            if (!vo.IsValid() && vo.Value is not null && !ResourceGroupNamePreSetValueCache.ResourceGroupNamePreSetValues.TryGetValue(vo.Value, out _)) {
                throw new System.ArgumentException(vo.GetValidationErrorMessage());
            }

            return vo;
        }

        /// <summary>
        ///     Tries to create a new <see cref="ResourceGroupName"/> from the
        ///     given <see cref="System.String"/>.
        /// </summary>
        /// <param name="value">The underlying value to create the value object from.</param>
        /// <param name="result">The resulting value object if the method returns <see langword="true"/>; otherwise, an uninitialized value object.</param>
        /// <returns><see langword="true"/> if the value object was created successfully; otherwise, <see langword="false"/>.</returns>
        public static bool TryFrom(System.String? value, out ResourceGroupName result) {
            if (value is null) {
                result = new ResourceGroupName();
                return false;
            }

            result = string.IsNullOrEmpty(value) ? Empty : new ResourceGroupName(value);
            return result.IsInitialized() && (Validate(result._value).IsSuccess || ResourceGroupNamePreSetValueCache.ResourceGroupNamePreSetValues.TryGetValue(value, out _));
        }

        /// <summary>
        ///     Represents a <see cref="ResourceGroupName"/> with a default underlying value.
        /// </summary>
        public static ResourceGroupName Empty { get; } = new ResourceGroupName(System.String.Empty);

        /// <summary>
        ///     Indicates whether this <see cref="ResourceGroupName"/> has been
        ///     initialized with a value.
        /// </summary>
        /// <returns><see langword="true" /> if this <see cref="ResourceGroupName"/> has been initialized; otherwise, <see langword="false" />.</returns>
        public bool IsInitialized() => _initialized;

        /// <inheritdoc />
        public bool Equals(ResourceGroupName? other)
        {
            if (other is null) return false;

            if (!other.Value.IsInitialized())
            {
                return !IsInitialized();
            }

            if (other.Value.IsInitialized() != IsInitialized())
            {
                return false;
            }
        
            return other.Value._isNullOrEmpty
                ? this._isNullOrEmpty
                : System.String.Equals(this._value, other.Value.Value, System.StringComparison.OrdinalIgnoreCase);
        }

        /// <inheritdoc />
        public bool Equals(ResourceGroupName other)
        {
            if (!other.IsInitialized())
            {
                return !IsInitialized();
            }

            if (other.IsInitialized() != IsInitialized())
            {
                return false;
            }
        
            return other._isNullOrEmpty
                ? this._isNullOrEmpty
                : System.String.Equals(this._value, other.Value, System.StringComparison.OrdinalIgnoreCase);
        }
        
        /// <inheritdoc />
        public bool Equals(ResourceGroupName? other, System.Collections.Generic.IEqualityComparer<ResourceGroupName> comparer)
        {
            if (other is null) return false;
            return comparer.Equals(this, other.Value);
        }
        
        /// <inheritdoc />
        public override int GetHashCode() {
            if (!IsInitialized()) return 0;
            return StringComparer.OrdinalIgnoreCase.GetHashCode(this._value);
        }

        /// <inheritdoc />
        public bool Equals(System.String? other)
        {
            return System.String.IsNullOrEmpty(other)
                ? this._isNullOrEmpty
                : System.String.Equals(this._value, other, System.StringComparison.OrdinalIgnoreCase);
        }
        
        /// <inheritdoc />
        public bool Equals(System.String? underlyingValue, StringComparer comparer)
        {
            return comparer.Equals(this.Value, underlyingValue);
        }

        /// <summary>
        ///     The equality operator for <see cref="ResourceGroupName" /> and <see cref="System.String" />.
        /// </summary>
        /// <returns><see langword="true" /> if the specified items are considered equal; otherwise, <see langword="false" />.</returns>
        public static bool operator ==(ResourceGroupName left, System.String? right) => left.Value.Equals(right);

        /// <summary>
        ///     The equality operator for <see cref="System.String" /> and <see cref="ResourceGroupName" />.
        /// </summary>
        /// <returns><see langword="true" /> if the specified items are considered equal; otherwise, <see langword="false" />.</returns>
        public static bool operator ==(System.String? left, ResourceGroupName right) => right.Value.Equals(left);

        /// <summary>
        ///     The inequality operator for <see cref="ResourceGroupName" /> and <see cref="System.String" />.
        /// </summary>
        /// <returns><see langword="true" /> if the specified items are considered not to be equal; otherwise, <see langword="false" />.</returns>
        public static bool operator !=(ResourceGroupName left, System.String? right) => !(left == right);

        /// <summary>
        ///     The inequality operator for <see cref="System.String" /> and <see cref="ResourceGroupName" />.
        /// </summary>
        /// <returns><see langword="true" /> if the specified items are considered not to be equal; otherwise, <see langword="false" />.</returns>
        public static bool operator !=(System.String? left, ResourceGroupName right) => !(left == right);

        /// <inheritdoc />
        public int CompareTo(ResourceGroupName other) => this.Value.CompareTo(other.Value);

        /// <inheritdoc />
        public int CompareTo(System.String? other) => this.Value.CompareTo(other);
        
        /// <inheritdoc />
        public int CompareTo(object? other)
        {
            if (other == null)
                return 1;
            if (other is ResourceGroupName other1)
                return this.CompareTo(other1);
            if (other is System.String v)
                return this.CompareTo(v);
            throw new System.ArgumentException(
                "Cannot compare to object as it is not of type ResourceGroupName",
                nameof(other)
            );
        }

        /// <summary>
        ///     An implicit conversion from <see cref="ResourceGroupName" /> to <see cref="System.String" />.
        /// </summary>
        /// <param name="id">The value to convert.</param>
        /// <returns>The System.String representation of the value object.</returns>
        public static implicit operator System.String(ResourceGroupName id)
        {
            return id.Value;
        }

        /// <summary>
        ///     An explicit conversion from <see cref="System.String" /> to <see cref="ResourceGroupName" />.
        /// </summary>
        /// <param name="value">The value to convert.</param>
        /// <returns>The <see cref="ResourceGroupName" /> instance created from the input value.</returns>
        public static explicit operator ResourceGroupName(System.String value)
        {
            return ResourceGroupName.From(value);
        }

        /// <inheritdoc />
        public override string ToString()
        {{
            return Value;
        }}

        /// <inheritdoc cref="M:System.String.ToString(System.IFormatProvider)" />
        public string ToString(IFormatProvider? provider)
        {{
            return Value.ToString(provider: provider);
        }}

        /// <summary>
        ///     Indicates whether this value object is valid.
        /// </summary>
        /// <returns><see langword="true" /> if this value object is valid; otherwise, <see langword="false" />.</returns>
        public bool IsValid() => _validation.IsSuccess;

        /// <summary>
        ///     Gets the validation error message if this value object is not valid.
        /// </summary>
        /// <returns>The validation error message if this value object is not valid; otherwise, <see langword="null" />.</returns>
        public string? GetValidationErrorMessage() => _validation.IsSuccess ? null : _validation.ErrorMessage;

        private class Validation
        {
            public static readonly Validation Ok = new(string.Empty);
            private readonly bool _isSuccess;
        
            private Validation(string reason)
            {
                ErrorMessage = reason;
                _isSuccess = string.IsNullOrEmpty(reason);
            }
        
            public string ErrorMessage { get; }
            public bool IsSuccess => _isSuccess;
        
            public System.Collections.Generic.Dictionary<object, object>? Data { get; private set; }
        
            public static Validation Invalid(string reason = "")
            {
                if (string.IsNullOrEmpty(reason))
                {
                    return new Validation("[none provided]");
                }
        
                return new Validation(reason);
            }
        
            public Validation WithData(object key, object value)
            {
                Data ??= new System.Collections.Generic.Dictionary<object, object>();
                Data[key] = value;
                return this;
            }
        }

        /// <inheritdoc />
        public static ResourceGroupName Parse(string s, IFormatProvider? provider)
        {
            return From(s);
        }

        /// <inheritdoc />
        public static bool TryParse(
            string? s,
            IFormatProvider? provider,
            out ResourceGroupName result
        )
        {
            return TryFrom(s, out result);
        }

        /// <inheritdoc />
        public static ResourceGroupName Parse(ReadOnlySpan<char> s, IFormatProvider? provider)
        {
            return From(new string(s));
        }

        /// <inheritdoc />
        public static bool TryParse(
            ReadOnlySpan<char> s,
            IFormatProvider? provider,
            out ResourceGroupName result
        )
        {
            return TryFrom(new string(s), out result);
        }

        /// <inheritdoc />
        public static ResourceGroupName Parse(ReadOnlySpan<byte> utf8Text, IFormatProvider? provider)
        {
            var s = System.Text.Encoding.UTF8.GetString(utf8Text);
            return From(s);
        }

        /// <inheritdoc />
        public static bool TryParse(
            ReadOnlySpan<byte> utf8Text,
            IFormatProvider? provider,
            out ResourceGroupName result
        )
        {
            try
            {
                var s = System.Text.Encoding.UTF8.GetString(utf8Text);
                return TryFrom(s, out result);
            }
            catch (ArgumentException)
            {
                result = default;
                return false;
            }
        }

        private class ResourceGroupNameSystemTextJsonConverter : System.Text.Json.Serialization.JsonConverter<ResourceGroupName>
        {
            public override ResourceGroupName Read(
                ref System.Text.Json.Utf8JsonReader reader,
                Type typeToConvert,
                System.Text.Json.JsonSerializerOptions options
            )
            {
                if (reader.TokenType == System.Text.Json.JsonTokenType.Null) {
                    return new ResourceGroupName();
                }

                object? underlyingValue;
                underlyingValue = reader.GetString();

                try {
                    var typedUnderlyingValue = (System.String)underlyingValue!;
                    if (ResourceGroupName.TryFrom(typedUnderlyingValue, out var result)) {
                        return result;
                    }
                    throw new System.Text.Json.JsonException($"No matching ResourceGroupName pre-set value found for value '{typedUnderlyingValue}', or the underlying value is invalid.");
                } catch (System.Exception e) {
                    throw new System.Text.Json.JsonException("Could not create an initialized instance of ResourceGroupName.", e);
                }
            }

            public override void Write(
                System.Text.Json.Utf8JsonWriter writer,
                ResourceGroupName value,
                System.Text.Json.JsonSerializerOptions options
            )
            {
                object? underlyingValue = value.IsInitialized()
                    ? value.Value
                    : null;

                if (underlyingValue == null) {
                    writer.WriteNullValue();
                    return;
                }

                writer.WriteStringValue((string)underlyingValue);
            }
        }

        private class ResourceGroupNameTypeConverter : System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, Type sourceType)
            {
                return sourceType == UnderlyingType || sourceType == typeof(string);
            }
            
            public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value)
            {
                if (value == null) return Empty;
        
                if (value.GetType() == UnderlyingType)
                {
                    var underlyingValue = GetUnderlyingValue(value);
                    return underlyingValue == default ? Empty : From((System.String)underlyingValue);
                }
        
                if (value is string s)
                {
                    if (string.IsNullOrWhiteSpace(s)) return Empty;
                    object underlyingValue;
                    if (UnderlyingType == typeof(Guid)) {
                        underlyingValue = Guid.Parse(s);
                    } else if (UnderlyingType == typeof(DateOnly)) {
                        underlyingValue = DateOnly.Parse(s, culture ?? System.Globalization.CultureInfo.InvariantCulture);
                    } else {
                        underlyingValue = Convert.ChangeType(s, UnderlyingType, culture ?? System.Globalization.CultureInfo.InvariantCulture);
                    }
                    return From((System.String)underlyingValue);
                }
    
                throw new NotSupportedException($@"Cannot convert from type '{value?.GetType()}'.");
            }

            private object? GetUnderlyingValue(object? value) {{
                if (value == null) {{
                    return default(System.String);
                }}
        
                if (value is System.String v) {
                    return v;
                }
                
                if (Type.GetTypeCode(typeof(System.String)) == TypeCode.Object) {
                    throw new NotSupportedException($"Cannot convert value of type '{value?.GetType()}' to 'System.String'.");
                }
                
                return Convert.ChangeType(value, typeof(System.String));
            }}
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, Type? destinationType)
            {
                return destinationType == UnderlyingType || destinationType == typeof(string);
            }
            
            public override object? ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, Type destinationType)
            {
                if (destinationType == UnderlyingType)
                {
                    if (value is ResourceGroupName vo)
                    {
                        return vo.Value;
                    }
                    return base.ConvertTo(context, culture ?? System.Globalization.CultureInfo.InvariantCulture, value, destinationType);
                }

                if (destinationType == typeof(string))
                {
                    if (value is ResourceGroupName vo)
                    {
                        return vo.ToString(culture ?? System.Globalization.CultureInfo.InvariantCulture);
                    }
                    if (value is System.IFormattable f)
                    {
                        return f.ToString(format: null, formatProvider: culture ?? System.Globalization.CultureInfo.InvariantCulture);
                    }
                    return value?.ToString();
                }

                throw new NotSupportedException($@"Cannot convert to type '{destinationType}'.");
            }
        }

        private static class ResourceGroupNamePreSetValueCache {
            public static readonly System.Collections.Generic.Dictionary<System.String, ResourceGroupName> ResourceGroupNamePreSetValues = new();
        
            static ResourceGroupNamePreSetValueCache()
            {
                ResourceGroupNamePreSetValues[ResourceGroupName.Empty.Value] = ResourceGroupName.Empty;

            }
        }
    }
    
}
  
#nullable enable

using System;
using FluentValidation;

namespace Dalion.ValueObjects.Samples {
    /// <summary>
    ///     Extension methods for FluentValidation to validate <see cref="ResourceGroupName"/> value objects.
    /// </summary>
    public static class ResourceGroupNameFluentValidationExtensions
    {
        /// <summary>
        ///     Validates that the value object is initialized.
        /// </summary>
        public static FluentValidation.IRuleBuilderOptions<T, ResourceGroupName> MustBeInitialized<T>(
            this FluentValidation.IRuleBuilderInitial<T, ResourceGroupName> ruleBuilder
        )
        {
            return ruleBuilder
                .Cascade(FluentValidation.CascadeMode.Stop)
                .Must(o => o.IsInitialized())
                .WithMessage($"{nameof(ResourceGroupName)} must be initialized.");
        }
    
        /// <summary>
        ///     Validates that the value object is initialized and valid.
        /// </summary>
        public static FluentValidation.IRuleBuilderOptions<T, ResourceGroupName> MustBeInitializedAndValid<T>(
            this FluentValidation.IRuleBuilderInitial<T, ResourceGroupName> ruleBuilder
        )
        {
            return ruleBuilder
                .Cascade(FluentValidation.CascadeMode.Stop)
                .Must(o => o.IsInitialized())
                .WithMessage($"{nameof(ResourceGroupName)} must be initialized.")
                .Must(o => o.IsValid())
                .WithMessage((_, p) => p.GetValidationErrorMessage());
        }
    }
}
  
// <auto-generated/>
#nullable enable
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // Unreferenced label
#pragma warning disable CS0219 // Variable assigned but never used

namespace Dalion.ValueObjects.Samples
{
    partial record struct ResourceGroupName
    {
        /// <remarks>
        /// Pattern:<br/>
        /// <code>^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,61}[A-Za-z0-9])$</code><br/>
        /// Explanation:<br/>
        /// <code>
        /// ○ Match if at the beginning of the string.<br/>
        /// ○ Match a character in the set [0-9A-Za-z].<br/>
        /// ○ Match a character in the set [-0-9A-Z_a-z] greedily at least 1 and at most 61 times.<br/>
        /// ○ Match a character in the set [0-9A-Za-z].<br/>
        /// ○ Match if at the end of the string or if before an ending newline.<br/>
        /// </code>
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "<version>")]
        private static partial global::System.Text.RegularExpressions.Regex ValidResourceGroupName() => global::System.Text.RegularExpressions.Generated.ValidResourceGroupName_0.Instance;
    }
}

namespace System.Text.RegularExpressions.Generated
{
    using System;
    using System.Buffers;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Text.RegularExpressions;
    using System.Threading;

    /// <summary>Custom <see cref="Regex"/>-derived type for the ValidResourceGroupName method.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "<version>")]
    file sealed class ValidResourceGroupName_0 : Regex
    {
        /// <summary>Cached, thread-safe singleton instance.</summary>
        internal static readonly ValidResourceGroupName_0 Instance = new();
    
        /// <summary>Initializes the instance.</summary>
        private ValidResourceGroupName_0()
        {
            base.pattern = "^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,61}[A-Za-z0-9])$";
            base.roptions = RegexOptions.None;
            ValidateMatchTimeout(Utilities.s_defaultTimeout);
            base.internalMatchTimeout = Utilities.s_defaultTimeout;
            base.factory = new RunnerFactory();
            base.capsize = 1;
        }
            
        /// <summary>Provides a factory for creating <see cref="RegexRunner"/> instances to be used by methods on <see cref="Regex"/>.</summary>
        private sealed class RunnerFactory : RegexRunnerFactory
        {
            /// <summary>Creates an instance of a <see cref="RegexRunner"/> used by methods on <see cref="Regex"/>.</summary>
            protected override RegexRunner CreateInstance() => new Runner();
        
            /// <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
            private sealed class Runner : RegexRunner
            {
                /// <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                protected override void Scan(ReadOnlySpan<char> inputSpan)
                {
                    // The pattern is anchored.  Validate the current position and try to match at it only.
                    if (TryFindNextPossibleStartingPosition(inputSpan) && !TryMatchAtCurrentPosition(inputSpan))
                    {
                        base.runtextpos = inputSpan.Length;
                    }
                }
        
                /// <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if a possible match was found; false if no more matches are possible.</returns>
                private bool TryFindNextPossibleStartingPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    
                    // Any possible match is at least 3 characters.
                    if (pos <= inputSpan.Length - 3)
                    {
                        // The pattern leads with a beginning (\A) anchor.
                        if (pos == 0)
                        {
                            return true;
                        }
                    }
                    
                    // No match found.
                    base.runtextpos = inputSpan.Length;
                    return false;
                }
        
                /// <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
                /// <param name="inputSpan">The text being scanned by the regular expression.</param>
                /// <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
                private bool TryMatchAtCurrentPosition(ReadOnlySpan<char> inputSpan)
                {
                    int pos = base.runtextpos;
                    int matchStart = pos;
                    char ch;
                    int charloop_starting_pos = 0, charloop_ending_pos = 0;
                    ReadOnlySpan<char> slice = inputSpan.Slice(pos);
                    
                    // Match if at the beginning of the string.
                    if (pos != 0)
                    {
                        return false; // The input didn't match.
                    }
                    
                    // Match a character in the set [0-9A-Za-z].
                    if (slice.IsEmpty || !char.IsAsciiLetterOrDigit(slice[0]))
                    {
                        return false; // The input didn't match.
                    }
                    
                    // Match a character in the set [-0-9A-Z_a-z] greedily at least 1 and at most 61 times.
                    //{
                        pos++;
                        slice = inputSpan.Slice(pos);
                        charloop_starting_pos = pos;
                        
                        int iteration = 0;
                        while (iteration < 61 && (uint)iteration < (uint)slice.Length && ((ch = slice[iteration]) < '{' && ("\0\0 Ͽ\ufffe蟿\ufffe߿"[ch >> 4] & (1 << (ch & 0xF))) != 0))
                        {
                            iteration++;
                        }
                        
                        if (iteration == 0)
                        {
                            return false; // The input didn't match.
                        }
                        
                        slice = slice.Slice(iteration);
                        pos += iteration;
                        
                        charloop_ending_pos = pos;
                        charloop_starting_pos++;
                        goto CharLoopEnd;
                        
                        CharLoopBacktrack:
                        
                        if (Utilities.s_hasTimeout)
                        {
                            base.CheckTimeout();
                        }
                        
                        if (charloop_starting_pos >= charloop_ending_pos ||
                            (charloop_ending_pos = inputSpan.Slice(charloop_starting_pos, charloop_ending_pos - charloop_starting_pos).LastIndexOfAny(Utilities.s_asciiLettersAndDigits)) < 0)
                        {
                            return false; // The input didn't match.
                        }
                        charloop_ending_pos += charloop_starting_pos;
                        pos = charloop_ending_pos;
                        slice = inputSpan.Slice(pos);
                        
                        CharLoopEnd:
                    //}
                    
                    // Match a character in the set [0-9A-Za-z].
                    if (slice.IsEmpty || !char.IsAsciiLetterOrDigit(slice[0]))
                    {
                        goto CharLoopBacktrack;
                    }
                    
                    // Match if at the end of the string or if before an ending newline.
                    if (2 < slice.Length || (1 < slice.Length && slice[1] != '\n'))
                    {
                        goto CharLoopBacktrack;
                    }
                    
                    // The input matched.
                    pos++;
                    base.runtextpos = pos;
                    base.Capture(0, matchStart, pos);
                    return true;
                }
            }
        }

    }
    
    /// <summary>Helper methods used by generated <see cref="Regex"/>-derived implementations.</summary>
    [GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "<version>")]
    file static class Utilities
    {
        /// <summary>Default timeout value set in <see cref="AppContext"/>, or <see cref="Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        internal static readonly TimeSpan s_defaultTimeout = AppContext.GetData("REGEX_DEFAULT_MATCH_TIMEOUT") is TimeSpan timeout ? timeout : Regex.InfiniteMatchTimeout;
        
        /// <summary>Whether <see cref="s_defaultTimeout"/> is non-infinite.</summary>
        internal static readonly bool s_hasTimeout = s_defaultTimeout != Regex.InfiniteMatchTimeout;
        
        /// <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        internal static readonly SearchValues<char> s_asciiLettersAndDigits = SearchValues.Create("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
    }
}

]